makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1)
m
makeVector(31)
getmean
set(3)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(3)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
set(37)
x<- c(39,37)
set(x)
makeVector(x)
makeVector$set
get(y)
get(x)
set(x)
makeVector
x<-c(37)
x<-47
makeVector(x)
MV<-makeVector(c(1,2,3))
cachemean(MV)
MV$set(c(3,4,5))
cachemean(MV)
cachemean(MV)
x<-(c(1,2,3),C(3,4,5))
x<-matrix(1:10, nrow=2, ncol=5)
x
x<-matrix(1:9, nrow=3, ncol=3)
x
x<-matrix(1:9, nrow=3, ncol=3, byrow=TRUE)
x
solve(x)
x<-matrix(1:4, nrow=2, ncol=2, byrow=TRUE)
x
solve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function (y){
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)){
message("Getting Cached Data")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setmean(m)
m
}
x<-matrix(1:4, nrow=2, ncol=2, byrow=TRUE)
x
makeCacheMatrix(x)
CM<-makeCacheMatrix(matrix(1:4, nrow=2, ncol=2, byrow=TRUE))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function (y){
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)){
message("Getting Cached Data")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setmean(m)
m
}
CM<-makeCacheMatrix(matrix(1:4, nrow=2, ncol=2, byrow=TRUE))
CM$get
CM$get(x)
cacheSolve(x)
cacheSolve(CM)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function (y){
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)){
message("Getting Cached Data")
return(m)
}
data <- x$get()
m <- solve(data,...)
x$setinv(m)
m
}
cacheSolve(CM)
CM$getinv
CM$get
newinv<-CM$getinv
newinv
cacheSolve(CM)
